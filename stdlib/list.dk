struct List<T>:
    buf: ptr<T>
    len: u64
    cap: u64

def list_new<T>() -> List<T>:
    list = List<T>()
    list.len = 0
    list.cap = 0

    return list

def list_add<T>(list: ptr<List<T>>, item: T):
    len = (*list).len
    cap = (*list).cap
    if len == cap:
        if len == 0:
            (*list).cap = 4
        else:
            (*list).cap = cap * 2

        new_allocation = mem_alloc<T>((*list).cap)
        if len > 0:
            i: u64 = 0
            while i < len:
                new_allocation[i] = (*list).buf[i]
                i = i + 1
            mem_free<T>((*list).buf)

        (*list).buf = new_allocation   
    
    (*list).buf[len] = item
    (*list).len = len + 1

def list_get<T>(list: ptr<List<T>>, index: u64) -> T:
    return (*list).buf[index]

def main():
    new_list = list_new<i32>()
    items = 0
    while items <= 10:
        list_add<i32>(&new_list, items)
        items = items + 1

    i: u64 = 0
    while i < new_list.len:
        print_int(list_get<i32>(&new_list, i))
        i = i + 1
