struct str:
    buf: ptr<u8>
    len: u64

def str_to_int(s: str) -> i32:
    return atoi(s.buf)

def get_str_buf(s: str) -> ptr<u8>:
    return s.buf

def print(str_to_print: str):
    puts(str_to_print.buf)

def print_int(i: i32):
    printf("%i\n".buf, i)

def print_uint(u: u32):
    printf("%i\n".buf, u)

def print_f32(f: f32):
    printf("%f\n".buf, f)

def print_f64(f: f64):
    printf("%d\n".buf, f)

def reinterpret_ptr<T, U>(p: ptr<T>) -> ptr<U>:
    intrinsic

def mem_alloc<T>(elems: u64) -> ptr<T>:
    num_bytes = elems * T.size
    printf("mem_alloc: Allocating %d bytes\n".buf, num_bytes)
    new_allocation = malloc(elems * T.size)
    return reinterpret_ptr<u8, T>(new_allocation)

def mem_free<T>(p: ptr<T>):
    as_u8 = reinterpret_ptr<T, u8>(p)
    printf("mem_free: Freeing ptr...\n".buf)
    free(as_u8)

struct TypeData:
    name: str
    size: u64
